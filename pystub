#!/usr/bin/env python3
# DNS stub server with support for DNS over TLS.
#
# RFC 1035: DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION
# RFC 7766: DNS Transport over TCP - Implementation Requirements
# RFC 7858: Specification for DNS over Transport Layer Security (TLS)
#
# SSHFP RFCs
# RFC 4255: Using DNS to Securely Publish Secure Shell (SSH) Key Fingerprints
# RFC 6594: Use of the SHA-256 Algorithm with RSA, Digital Signature Algorithm (DSA), and Elliptic Curve DSA (ECDSA) in SSHFP Resource Records
# RFC 7479: Using Ed25519 in SSHFP Resource Records
# Status: Work in Progress

import socket
import socketserver
import threading
import random
import sys
import ssl
import json
import copy
import re
import urllib.request
import argparse
import os
import yaml

class upstream:
    upstreams = []
    lock = threading.Lock()

    def __init__(self, addr, tls_name, port, tcp):
        # TODO: verify valid input
        self.address  = addr
        self.tls_name = tls_name
        self.port     = port
        self.tcp      = 1 if len(tls_name) > 0 else tcp
        self.tls      = 1 if len(tls_name) > 0 else 0
        self.enabled  = 0
        upstream.lock.acquire()
        upstream.upstreams.append(self)
        upstream.lock.release()

    @staticmethod
    def get_connection():
        while True:
            conn = None
            up = None
            up = upstream.get_server()
            if up is None: break
            conn = up.connect()
            if conn: break
            up.disable()
        return up, conn

    @staticmethod
    def get_server():
        tmp = list(range(len(upstream.upstreams)))
        random.shuffle(tmp)
        for i in tmp:
            if upstream.upstreams[i].enabled:
                return upstream.upstreams[i]
        return None

    @staticmethod
    def check_upstreams():
        for up in upstream.upstreams:
            conn = up.connect()
            if conn:
                up.close(conn)
                up.enable()
            else:
                up.disable()

    def enable(self):
        upstream.lock.acquire()
        self.enabled = 1
        upstream.lock.release()

    def disable(self):
        upstream.lock.acquire()
        self.enabled = 0
        upstream.lock.release()

    def connect(self):
        timeout = 2  #Seconds
        if self.tls:
            cnxt = ssl.create_default_context()
            try:
                sock = socket.create_connection((self.address, self.port), timeout)
            except Exception:
                print("Unable to connect to "+self.tls_name)
                return None
            upstr = cnxt.wrap_socket(sock, server_hostname=self.tls_name)
        else:
            sock_type = socket.SOCK_STREAM if self.tcp else socket.SOCK_DGRAM
            upstr = socket.socket(socket.AF_INET, sock_type)
            upstr.settimeout(timeout)
            try:
                upstr.connect((self.address, self.port))
            except Exception:
                print("Unable to connect to "+self.address)
                return None
        return upstr

    def close(self, conn):
        conn.shutdown(socket.SHUT_WR)
        conn.close()

    def sendall(self, conn, packet):
        if self.tcp:
            packet_len = len(packet).to_bytes(2, byteorder='big')
            packet = packet_len + packet
        return conn.sendall(packet)

    def recvall(self, conn):
        if self.tcp:
            conn.settimeout(6)
            try:
                enc_len = conn.recv(2)
                enc_len = int.from_bytes(enc_len, 'big')
            except Exception:
                return ""
            pkt_len = 0
            packet = b''
            while pkt_len < enc_len:
                try:
                    packet += conn.recv(enc_len - pkt_len)
                except Exception:
                    return ""
                pkt_len += len(packet)
            return packet
        else:
            try:
                return conn.recv(512)
            except Exception:
                return ""


class DNSMessage:
    qtypes = {'A'    :  1,
              'NS'   :  2,
              'CNAME':  5,
              'SOA'  :  6,
              'PTR'  : 12,
              'MX'   : 15,
              'TXT'  : 16,
              'AAAA' : 28,
              'SRV'  : 33,
              'SSHFP': 44}

    qclasses = {'IN': 1}

    rcodes = {0: "No Error",
              1: "Format Error",
              2: "Server Failure",
              3: "Non-Existent Domain",
              4: "Not Implemented",
              5: "Query Refused"}

    opcodes = {0: "Query",
               1: "IQuery",
               2: "Status",
               4: "Notify",
               5: "Update",
               6: "DSO"}

    sshfp_algs = {'RSA'    : 1,
                  'DSS'    : 2,
                  'ECDSA'  : 3,
                  'Ed25519': 4}

    sshfp_types = {'SHA-1'  : 1,
                   'SHA-256': 2}

    def __init__(self, packet=None):
        self.ERROR = None
        self.TXID = -1
        self.FLAG = {"QR": 0,
                     "OpCode": 0,
                     "AA": 0,
                     "TC": 0,
                     "RD": 1,
                     "RA": 0,
                     "Z": 0,
                     "AD": 0,
                     "CD": 0,
                     "RCode": 0
                    }
        self.QDCount = 0
        self.ANCount = 0
        self.NSCount = 0
        self.ARCount = 0
        self.Question = []
        self.Answer = []
        self.Authority = []
        self.Additional = []
        if isinstance(packet, bytes):
            self.__parse_packet(packet)


    def __str__(self):
        return str(self.to_json())

    def to_json(self):
        pretty = {'ERROR': self.ERROR, 'TXID': self.TXID, 'FLAG': self.FLAG,
                  'QDCount': self.QDCount, 'ANCount': self.ANCount, 'NSCount': self.NSCount, 'ARCount': self.ARCount,
                  'Question': self.Question, 'Answer': self.Answer, 'Authority': self.Authority, 'Additional': self.Additional}
        return json.dumps(pretty, indent=2)

    def to_bytes(self):
        header_bytes = self.__header_to_bytes()
        RR_bytes = self.__RRs_to_bytes()
        if header_bytes is None or RR_bytes is None:
            return None
        return header_bytes + RR_bytes


    def __header_to_bytes(self):
        if self.TXID < 0:
            return None #TXID has not been initialized
        trans_id = self.TXID.to_bytes(2, 'big')
        flags = self.__flags_to_bytes()
        if len(self.Question) != self.QDCount:
            return None
        QDCount = self.QDCount.to_bytes(2, 'big')
        if len(self.Answer) != self.ANCount:
            return None
        ANCount = self.ANCount.to_bytes(2, 'big')
        if len(self.Authority) != self.NSCount:
            return None
        NSCount = self.NSCount.to_bytes(2, 'big')
        if len(self.Additional) != self.ARCount:
            return None
        ARCount = self.ARCount.to_bytes(2, 'big')
        return trans_id + flags + QDCount + ANCount + NSCount + ARCount

    def __bytes_to_header(self, header):
        self.TXID    = int.from_bytes(header[:2], 'big')
        self.QDCount = int.from_bytes(header[4:6], 'big')
        self.ANCount = int.from_bytes(header[6:8], 'big')
        self.NSCount = int.from_bytes(header[8:10], 'big')
        self.ARCount = int.from_bytes(header[10:12], 'big')
        flags = int.from_bytes(header[2:4], 'big')
        self.__bytes_to_flags(flags)

    def set_header(self, TXID=None, QDCount=None, ANCount=None, NSCount=None, ARCount=None):
        if type(TXID) is int and TXID > 0:
            self.TXID = TXID
        if type(QDCount) is int and QDCount > 0:
            self.QDCount = QDCount
        if type(ANCount) is int and ANCount > 0:
            self.ANCount = ANCount
        if type(NSCount) is int and NSCount > 0:
            self.NSCount = NSCount
        if type(ARCount) is int and ARCount > 0:
            self.ARCount = ARCount


    # QR     : Query: 0, Response: 1
    # OpCode : Standard Query: 0000, Inverse Query: 0100
    # AA     : Authoritative Answer
    # TC     : Is Message truncated
    # RD     : Do query recursively
    # RA     : Is recursive support available in the NS
    # Z      : Reserved
    # RCode  : Response Code
    def __flags_to_bytes(self):
        QR = self.FLAG["QR"]
        OpCode = self.FLAG["OpCode"]
        AA = self.FLAG["AA"]
        TC = self.FLAG["TC"]
        RD = self.FLAG["RD"]
        RA = self.FLAG["RA"]
        Z = self.FLAG["Z"]
        RCode = self.FLAG["RCode"]
        flags = QR*(2**15) | OpCode*(2**11) | AA*(2**10)| TC*(2**9) | RD*(2**8) | RA*(2**7) | Z*(2**4) | RCode
        return flags.to_bytes(2, byteorder='big')

    def __bytes_to_flags(self, flags):
        QR     = (flags >> 15) & 2**1-1
        OpCode = (flags >> 11) & 2**4-1
        AA     = (flags >> 10) & 2**1-1
        TC     = (flags >>  9) & 2**1-1
        RD     = (flags >>  8) & 2**1-1
        RA     = (flags >>  7) & 2**1-1
        Z      = (flags >>  6) & 2**1-1
        AD     = (flags >>  5) & 2**1-1  #RFC 4035
        CD     = (flags >>  4) & 2**1-1  #RFC 4035
        RCode  = (flags >>  0) & 2**4-1
        #TODO: Validity check needed
        self.FLAG = {"QR":QR, "OpCode":OpCode, "AA":AA, "TC":TC, "RD":RD, "RA":RA, "Z":Z, "AD":AD, "CD":CD, "RCode":RCode}

    def set_flags(self, QR=None, OpCode=None, AA=None, TC=None, RD=None, RA=None, AD=None, CD=None, RCode=None):
        if type(QR) is int and QR in {0,1}:
            self.FLAG["QR"] = QR
        if type(OpCode) is int and OpCode in DNSMessage.opcodes:
            self.FLAG["OpCode"] = OpCode
        if type(AA) is int and AA in {0,1}:
            self.FLAG["AA"] = AA
        if type(TC) is int and TC in {0,1}:
            self.FLAG["TC"] = TC
        if type(RD) is int and RD in {0,1}:
            self.FLAG["RD"] = RD
        if type(RA) is int and RA in {0,1}:
            self.FLAG["RA"] = RA
        if type(AD) is int and AD in {0,1}:
            self.FLAG["AD"] = AD
        if type(CD) is int and CD in {0,1}:
            self.FLAG["CD"] = CD
        if type(RCode) is int and RCode in DNSMessage.rcodes:
            self.FLAG["RCode"] = RCode


    def __question_to_bytes(self):
        quest = self.Question
        query = DNSMessage.name_to_bytes(quest['QNAME'])
        if query is None:
            return None
        qtype = DNSMessage.qtypes.get(quest['QTYPE'])
        if qtype is None:
            return None
        query += qtype.to_bytes(2, byteorder='big')
        qclass = DNSMessage.qclasses.get(quest['QCLASS'])
        if qclass is None:
            return None
        query += qclass.to_bytes(2, byteorder='big')
        return query

    def __bytes_to_question(self, start, data):
        qname = DNSMessage.bytes_to_name(start, data)
        if qname is None:
            self.ERROR = 'Error parsing qname'
            return
        pos = DNSMessage.skip_name(start, data)
        if pos < 0 or len(data) < pos+4:
            self.ERROR = 'Malformed packet'
            return
        qtype_int = int.from_bytes(data[pos:pos+2], 'big')
        qtype = DNSMessage.__reverse_get(DNSMessage.qtypes, qtype_int)
        if qtype is None:
            self.ERROR = 'Unsupported qtype: ' + str(qtype_int)
            return
        qclass_int = int.from_bytes(data[pos+2:pos+4], 'big')
        qclass = DNSMessage.__reverse_get(DNSMessage.qclasses, qclass_int)
        if qclass is None:
            self.ERROR = 'Unsupported qclass: ' + str(qclass_int)
            return
        self.Question.append({'QNAME':qname, "QTYPE":qtype, 'QCLASS':qclass})

    def set_question(self, qname, qtype, qclass):
        if qtype not in DNSMessage.qtypes.keys():
            self.ERROR = "Support not implemented for record type: " + str(qtype)
        if qclass not in DNSMessage.qclasses.keys():
            self.ERROR ="Support not implemented for query class type: " + str(qclass)
        self.Question.append({'QNAME':qname, "QTYPE":qtype, 'QCLASS':qclass})


    def gen_txid(self):
        self.TXID = random.randrange(2**16-1)

    @staticmethod
    def name_to_bytes(qname):
        if not isinstance(qname, str):
            return None
        if len(qname) > 253:
            return None
        dns_name = str.encode('')
        parts = qname.split('.')
        for part in parts:
            if len(part) > 63:
                return None
            dns_name += str.encode(chr(len(part))+part)
        dns_name += str.encode(chr(0))
        return dns_name

    @staticmethod
    def bytes_to_name(start, packet, pointers=None):
        if pointers is None:
            pointers = []
        if start in pointers:
            print("Circular name reference detected. Aborting name parsing...")
            return None
        pointers.append(start)
        name_str = ''
        i = start
        while i < len(packet):
            if packet[i] > 0:
                if(packet[i] >= 0xc0):
                    if debug: print("Compressed name received. Following reference")
                    offset = int.from_bytes(packet[i:i+2], 'big') & 2**14-1
                    parsed = DNSMessage.bytes_to_name(offset, packet, pointers)
                    if parsed is None:
                        return parsed
                    name_str += parsed
                    return name_str
                count = packet[i]
                if len(packet) < i+count+1:
                    print("Malformed name")
                    return None
                name_bytes = packet[i+1:i+count+1]
                if any(byte > 127 for byte in name_bytes):
                    print("Non ascii character received. This is not supported yet")
                    return None
                name_str += name_bytes.decode("ascii")
                name_str += '.'
                i+=count+1
            else:
                name_str = name_str[:-1]
                if len(name_str) > 253: #Domain length restriction
                    return None
                return name_str
        return None

    @staticmethod
    def skip_name(start, data):
        i = start
        while i < len(data):
            if data[i] > 0:
                if data[i] >= 0xc0:
                    return i + 2
                i += 1
            else:
                return i + 1
        return -1

    @staticmethod
    def __bytes_to_rdata(qtype, start, data):
        rdata = {}
        if qtype == DNSMessage.qtypes['A']:
            if debug: print("Parsing A record")
            rdata['ADDRESS'] = str(data[start])+'.'+str(data[start+1])+'.'+str(data[start+2])+'.'+str(data[start+3])
        elif qtype == DNSMessage.qtypes['NS']:
            if debug: print("Parsing NS record")
            rdata['NSDNAME'] = DNSMessage.bytes_to_name(start, data)
        elif qtype == DNSMessage.qtypes['CNAME']:
            if debug: print("Parsing CNAME record")
            rdata['CNAME'] = DNSMessage.bytes_to_name(start, data)
        elif qtype == DNSMessage.qtypes['SOA']:
            if debug: print("Parsing SOA record")
            rdata['MNAME'] = DNSMessage.bytes_to_name(start, data)
            start = DNSMessage.skip_name(start, data)
            rdata['RNAME'] = DNSMessage.bytes_to_name(start, data)
            start = DNSMessage.skip_name(start, data)
            rdata['SERIAL']  = int.from_bytes(data[start:start+4], 'big')
            rdata['REFRESH'] = int.from_bytes(data[start+4:start+8], 'big')
            rdata['RETRY']   = int.from_bytes(data[start+8:start+12], 'big')
            rdata['EXPIRE']  = int.from_bytes(data[start+12:start+16], 'big')
            rdata['MINIMUM'] = int.from_bytes(data[start+16:start+20], 'big')
        elif qtype == DNSMessage.qtypes['PTR']:
            if debug: print("Parsing PTR record")
            rdata['PTRDNAME'] = DNSMessage.bytes_to_name(start, data)
        elif qtype == DNSMessage.qtypes['MX']:
            if debug: print("Parsing MX record")
            rdata['PREFERENCE'] = int.from_bytes(data[start:start+2], 'big')
            rdata['EXCHANGE']   = DNSMessage.bytes_to_name(start+2, data)
        elif qtype == DNSMessage.qtypes['TXT']:
            if debug: print("Parsing TXT record")
            length = int.from_bytes(data[start-2:start], 'big')
            curr_size = 0
            rdata['TXT-DATA'] = []
            while curr_size < length and data[start+curr_size]:
                size = data[start+curr_size]
                rdata['TXT-DATA'].append(data[start+curr_size+1:start+curr_size+1+size].decode("ascii"))
                curr_size += (1+size)
        elif qtype == DNSMessage.qtypes['AAAA']:
            if debug: print("Parsing AAAA record")
            AAAA = ''
            for i in range(8): AAAA += (str(data[start+2*i:start+2*i+2].hex())+':')
            rdata['ADDRESS'] = AAAA[:-1]
        elif qtype == DNSMessage.qtypes['SRV']:  #RFC 2782
            if debug: print("Parsing SRV record")
            rdata['PRIORITY'] = int.from_bytes(data[start:start+2], 'big')
            rdata['WEIGHT']   = int.from_bytes(data[start+2:start+4], 'big')
            rdata['PORT']     = int.from_bytes(data[start+4:start+6], 'big')
            rdata['TARGET']   = DNSMessage.bytes_to_name(start+6, data)
        elif qtype == DNSMessage.qtypes['SSHFP']:
            if debug: print("Parsing SSHFP record")
            fing_alg  = int.from_bytes(data[start:start+1], 'big')
            fing_type = int.from_bytes(data[start+1:start+2], 'big')
            fing_len  = 0
            if fing_type == 1: fing_len = 20
            elif fing_type == 2: fing_len = 32
            fing_alg  = DNSMessage.__reverse_get(DNSMessage.sshfp_algs,  fing_alg)
            fing_type = DNSMessage.__reverse_get(DNSMessage.sshfp_types, fing_type)
            if fing_alg is None or fing_type is None:
                print("Unknown SSHFP algorithm/type encountered")
                return None
            rdata['ALGORITHM']   = fing_alg
            rdata['FP_TYPE']     = fing_type
            rdata['FINGERPRINT'] = str(data[start+2:start+2+fing_len].hex())
        else:
            print("Parsing not implemented for record type: " + str(qtype))
            rdata = None
        return rdata

    @staticmethod
    def __rdata_to_bytes(data):
        rdata = b''
        qtype = data['QTYPE']
        if qtype == 'A':
            if debug: print("Building A record")
            size   = 4
            add    = data['ADDRESS'].split('.')
            rdata += size.to_bytes(2, byteorder='big')
            for i in range(4):
                rdata += int(add[i]).to_bytes(1, 'big')
        elif qtype == 'NS':
            if debug: print("Building NS record")
            nsdname = DNSMessage.name_to_bytes(data['NSDNAME'])
            rdata  += len(nsdname).to_bytes(2, byteorder='big')
            rdata  += nsdname
        elif qtype == 'CNAME':
            if debug: print("Building CNAME record")
            cname  = DNSMessage.name_to_bytes(data['CNAME'])
            rdata += len(cname).to_bytes(2, byteorder='big')
            rdata += cname
        elif qtype == 'SOA':
            if debug: print("Building SOA record")
            mname = DNSMessage.name_to_bytes(data['MNAME'])
            rname = DNSMessage.name_to_bytes(data['RNAME'])
            size = len(mname) + len(rname) + 4*5
            serial  = data['SERIAL'].to_bytes(4, byteorder='big')
            refresh = data['REFRESH'].to_bytes(4, byteorder='big')
            retry   = data['RETRY'].to_bytes(4, byteorder='big')
            expire  = data['EXPIRE'].to_bytes(4, byteorder='big')
            minimum = data['MINIMUM'].to_bytes(4, byteorder='big')
            rdata  += size.to_bytes(2, byteorder='big')
            rdata  += mname + rname + serial + refresh + retry + expire + minimum
        elif qtype == 'PTR':
            if debug: print("Building PTR record")
            ptrdname = DNSMessage.name_to_bytes(data['PTRDNAME'])
            rdata += len(ptrdname).to_bytes(2, byteorder='big')
            rdata += ptrdname
        elif qtype == 'MX':
            if debug: print("Building MX record")
            pref = data['PREFERENCE'].to_bytes(2, byteorder='big')
            exch = DNSMessage.name_to_bytes(data['EXCHANGE'])
            size = len(exch) + 2
            rdata  += size.to_bytes(2, byteorder='big')
            rdata  += pref + exch
        elif qtype == 'TXT':
            if debug: print("Building TXT record")
            txtdata = data['TXT-DATA']
            tot_len = 0
            tmp = str.encode('')
            for entry in txtdata:
                length = len(entry).to_bytes(1, byteorder='big')
                val = str.encode(entry)
                tmp += length + val
                tot_len += 1 + len(val)
            rdata += tot_len.to_bytes(2, byteorder='big')
            rdata += tmp
        elif qtype == 'AAAA':
            if debug: print("Building AAAA record")
            size = 16
            rdata += size.to_bytes(2, byteorder='big')
            aaaa = data['ADDRESS']
            for group in aaaa.split(':'): rdata += bytes.fromhex(group)
        elif qtype == 'SRV':
            if debug: print("Building SRV record")
            priority = data['PRIORITY'].to_bytes(2, byteorder='big')
            weight   = data['WEIGHT'].to_bytes(2, byteorder='big')
            port     = data['PORT'].to_bytes(2, byteorder='big')
            target   = DNSMessage.name_to_bytes(data['TARGET'])
            size     = 6 + len(target)
            rdata   += size.to_bytes(2, byteorder='big')
            rdata   += priority + weight + port + target
        elif qtype == 'SSHFP':
            if debug: print("Building SSHFP record")
            fing_alg  = DNSMessage.sshfp_algs.get(data['ALGORITHM'])
            fing_type = DNSMessage.sshfp_types.get(data['FP_TYPE'])
            if fing_alg is None or fing_type is None:
                print("Unknown SSHFP algorithm/type encountered")
                return rdata
            fing_alg  = fing_alg.to_bytes(1, byteorder='big')
            fing_type = fing_type.to_bytes(1, byteorder='big')
            fing      = bytes.fromhex(data['FINGERPRINT'])
            sshfp     = fing_alg + fing_type + fing
            rdata    += len(sshfp).to_bytes(2, byteorder='big')
            rdata    += sshfp
        else:
            print("Writing not implmented for record type: " + str(qtype))
            print(data)
        return rdata

    # Writes the RR data to the packet
    # Call rdata_to_bytes for each record
    def __RRs_to_bytes(self):
        response = b''
        if self.QDCount:
            qname  = self.Question[0]['QNAME']
            qtype  = self.Question[0]['QTYPE']
            qclass = self.Question[0]['QCLASS']
            response = DNSMessage.name_to_bytes(qname)
            if response is None:
                return None
            response += DNSMessage.qtypes[qtype].to_bytes(2, byteorder='big')
            response += DNSMessage.qclasses[qclass].to_bytes(2, byteorder='big')
        for section in ['Answer', 'Authority', 'Additional']:
            count = 0
            if section == 'Answer' and self.ANCount:
                count = self.ANCount
                data_section = self.Answer
            elif section == 'Authority' and self.NSCount:
                count = self.NSCount
                data_section = self.Authority
            elif section == 'Additional' and self.ARCount:
                count = self.ARCount
                data_section = self.Additional
            for i in range(count):
                qname  = data_section[i]['QNAME']
                qtype  = data_section[i]['QTYPE']
                qclass = data_section[i]['QCLASS']
                ttl    = data_section[i]['TTL']

                tmp_res = DNSMessage.name_to_bytes(qname)
                if response is None:
                    return None
                tmp_res += DNSMessage.qtypes[qtype].to_bytes(2, byteorder='big')
                tmp_res += DNSMessage.qclasses[qclass].to_bytes(2, byteorder='big')
                tmp_res += ttl.to_bytes(4, byteorder='big')
                rdata = DNSMessage.__rdata_to_bytes(data_section[i])
                if len(rdata) > 0 :  #Type implemented
                    tmp_res  += rdata
                    response += tmp_res
        return response

    #TODO: add option for shallow copy
    def copy_RRs(self, source, sections=['Question', 'Answer', 'Authority', 'Additional']):
        for section in sections:
            if section == 'Question':
                self.QDCount = source.QDCount
                self.Question = copy.deepcopy(source.Question)
            elif section == 'Answer':
                self.ANCount = source.ANCount
                self.Answer = copy.deepcopy(source.Answer)
            elif section == 'Authority':
                self.NSCount = source.NSCount
                self.Authority = copy.deepcopy(source.Authority)
            elif section == 'Additional':
                self.ARCount = source.ARCount
                self.Additional = copy.deepcopy(source.Additional)

    def __parse_packet(self, packet):
        pkt_len = len(packet)

        # parse header
        if pkt_len < 12:
            self.ERROR = "Packet length too short: " + str(pkt_len) + " bytes"
            return

        header = packet[:12]
        self.__bytes_to_header(header)

        if self.FLAG["RCode"] not in DNSMessage.rcodes:
            self.ERROR = "RCode not implemented: " + str(self.FLAG["RCode"])
            return

        if self.FLAG["OpCode"] not in DNSMessage.opcodes:
            self.ERROR = "OpCode not implemented: " + str(self.FLAG["OpCode"])
            return

        #Sanity check the client flags on a query
        if self.FLAG['QR'] == 0 and (self.FLAG['OpCode'] or self.FLAG['AA'] or self.FLAG['RA'] or self.FLAG['Z'] or self.FLAG['RCode']):
            self.ERROR = "Invalid client request flags"
            return

        pos = 12
        if(self.QDCount):
            if debug: print("Packet query section. Parsing...")
            if self.QDCount > 1:
                print("QDCount > 1 not supported. Disregarding additional queries")
                self.QDCount = 1
                # TODO: We're not jumping over the other queries, corrupting the other sections?
            self.__bytes_to_question(pos, packet)
            if self.ERROR: return
            # Note we don't need to error check this as __bytes_to_question already does
            pos = DNSMessage.skip_name(pos, packet)+4
        for section in ('Answer', 'Authority', "Additional"):
            if section == 'Answer':
                count = self.ANCount
                entries = self.Answer
            elif section == "Authority":
                count = self.NSCount
                entries = self.Authority
            elif section == "Additional":
                count = self.ARCount
                entries = self.Additional
            if count and debug: print("Response contains " + section + " section. Parsing...")
            if pkt_len < pos + count*10:  # Sanity check so we don't loop a crazy number of times on a malformed packet
                self.ERROR = "Malformed packet"  # TODO: revisit this when we wire up truncation
                return
            for _ in range(count):
                qname = DNSMessage.bytes_to_name(pos, packet)
                if qname is None:
                    self.ERROR = "Error parsing name"
                    return
                pos = DNSMessage.skip_name(pos, packet)
                if pos == -1:
                    self.ERROR = "Error parsing name"
                    return
                if pkt_len < pos + 10:
                    self.ERROR = "Malformed packet"
                    return
                qtype  = int.from_bytes(packet[pos:pos+2], 'big')
                qclass = int.from_bytes(packet[pos+2:pos+4], 'big')
                ttl    = int.from_bytes(packet[pos+4:pos+8], 'big')
                RDlen  = int.from_bytes(packet[pos+8:pos+10], 'big')
                pos += 10
                if pkt_len < pos + RDlen:
                    self.ERROR = "Malformed packet"
                    return
                RData = DNSMessage.__bytes_to_rdata(qtype, pos, packet)
                if RData is None:  # Unable to parse rdata record. Decrement appropriate count
                    if   section == 'Answer':     self.ANCount -= 1
                    elif section == 'Authority':  self.NSCount -= 1
                    elif section == 'Additional': self.ARCount -= 1
                else:
                    RData['QNAME']  = qname
                    RData['QTYPE']  = DNSMessage.__reverse_get(DNSMessage.qtypes, qtype)
                    RData['QCLASS'] = DNSMessage.__reverse_get(DNSMessage.qclasses, qclass)
                    RData['TTL']    = ttl
                    #TODO: We need to check if any of the RData fields are set to NONE
                    entries.append(RData)
                pos += RDlen
        return

    # Reverse map function for 1:1 dictionaries
    @staticmethod
    def __reverse_get(dictionary, value):
        rev = {v: k for k, v in dictionary.items()}
        return rev.get(value)


######DEFAULT SETTINGS######
deflt_cnfg_file = '/etc/pystub.yml'
verbose = 0
debug = 0
upstrm_cnfgs = [
                {
                 "address":'8.8.8.8',
                 "tls_name":"dns.google",
                 "port":853,
                 "tcp":1
                }
               ]
blacklist = []
#############################


def main():
    global verbose
    global debug
    global upstrm_cnfgs
    global blacklist

    MIN_PYTHON = (3, 5)
    if sys.version_info < MIN_PYTHON:
        sys.exit("Python %s.%s or later is required.\n" % MIN_PYTHON)

    parser = argparse.ArgumentParser(description='Pystub DNS stub resolver')
    parser.add_argument('-C', dest='config_file', help='Configuration file location')
    parser.add_argument('-v', dest='verbose', action='store_true', help='Verbose output')
    parser.add_argument('-vv', dest='debug', action='store_true', help='Debug output')
    args = parser.parse_args()
    config_file = args.config_file
    verbose     = args.verbose or args.debug
    debug       = args.debug

    #Parse config
    if config_file is None:
        config_file = deflt_cnfg_file if os.path.isfile(deflt_cnfg_file) else None
    config = []
    if config_file:
        with open(config_file, "r") as c:
            try:
                config = yaml.safe_load(c)
            except yaml.YAMLError as exc:
                print(exc)
                sys.exit(1)
    if "upstreams" in config and len(config["upstreams"]) > 0:
        upstrm_cnfgs = config["upstreams"]
    listen_add = "127.0.0.1"
    if "listen" in config and len(config["listen"]) > 0:
        listen_add = config["listen"][0]  # TODO: support for multiple listen addresses
    if "blacklist" in config and len(config["blacklist"]) > 0:
        domain_regex = r"^([a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}$"
        ip_regex     = r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"
        if "url" in config["blacklist"]:
            for url in config["blacklist"]["url"]:
                try:
                    page = urllib.request.urlopen(url)
                except Exception:
                    print("Unable to parse blocklist from " + url)
                    continue
                for line in page:
                    decoded = line.decode('utf-8').strip()
                    if decoded == '': continue
                    if decoded[0] == '#': continue
                    split = decoded.split()
                    if re.fullmatch(domain_regex, split[0]): #Domain list
                        blacklist.append(split[0])
                    elif len(split) > 1 and re.fullmatch(ip_regex, split[0]) and re.fullmatch(domain_regex, split[1]): #HOSTS file format
                        blacklist.append(split[1])
        if "domain" in config["blacklist"]:
            for domain in config["blacklist"]["domain"]:
                if re.fullmatch(domain_regex, domain):
                    blacklist.append(domain)
        print("Imported " + str(len(blacklist)) + " blacklist domains")

    # Parse upstreams
    for cnfg in upstrm_cnfgs:
        upstream(cnfg["address"], cnfg["tls_name"], cnfg["port"], cnfg["tcp"])
    upstream.check_upstreams()

    tcp_server = ThreadedTCPServer((listen_add, 53), ThreadedTCPRequestHandler)
    tcp_server_thread = threading.Thread(target=tcp_server.serve_forever)
    tcp_server_thread.start()
    udp_server = ThreadedUDPServer((listen_add, 53), ThreadedUDPRequestHandler)
    udp_server_thread = threading.Thread(target=udp_server.serve_forever)
    udp_server_thread.start()
    print("Server listening on " + listen_add + " port 53\n")
    #TODO: Add maintenance thread that occasionally checks upstreams and updates the ad block lists


class ThreadedTCPRequestHandler(socketserver.BaseRequestHandler):
    def handle(self):
        self.request.settimeout(6)
        try:
            enc_len = self.request.recv(2)
            enc_len = int.from_bytes(enc_len, 'big')
        except Exception:
            return
        pkt_len = 0
        packet = b''
        while pkt_len < enc_len:
            try:
                packet += self.request.recv(enc_len - pkt_len)
            except Exception:
                return
            pkt_len += len(packet)
        packet = process_query(packet)
        if packet is None:
            return  # No response to send back to client
        packet_len = len(packet).to_bytes(2, byteorder='big')
        packet = packet_len + packet
        self.request.sendall(packet)

class ThreadedUDPRequestHandler(socketserver.BaseRequestHandler):
    def handle(self):
        request = self.request[0]
        packet = process_query(request)
        if packet is None:
            return  # No response to send back to client
        self.request[1].sendto(packet, self.client_address)

class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer): pass

class ThreadedUDPServer(socketserver.ThreadingMixIn, socketserver.UDPServer): pass

def process_query(request):
    if debug: print("Received client query")
    request = DNSMessage(request)
    if request.ERROR:
        print('ERROR: '+request.ERROR)
        if request.TXID == -1:
            return None  # Drop packet since we can't even reply
        cltxid = request.TXID
        RD = request.FLAG['RD']
        response = DNSMessage()
        if "Unsupported qtype" in request.ERROR:
            response.set_flags(QR=1, RD=RD, RA=1, RCode=4)
        elif "Unsupported qclass" in request.ERROR:
            response.set_flags(QR=1, RD=RD, RA=1, RCode=4)
        elif request.ERROR == "Malformed packet":
            response.set_flags(QR=1, RD=RD, RA=1, RCode=1)
        elif request.ERROR == "Error parsing qname":
            response.set_flags(QR=1, RD=RD, RA=1, RCode=1)
        elif "RCode not implemented" in request.ERROR:
            response.set_flags(QR=1, RD=RD, RA=1, RCode=4)
        elif "OpCode not implemented" in request.ERROR:
            response.set_flags(QR=1, RD=RD, RA=1, RCode=4)
        elif request.ERROR == "Invalid client request flags":
            response.set_flags(QR=1, RD=RD, RA=1, RCode=1)
        else:  # Send back server failure if we don't have a better code
            response.set_flags(QR=1, RD=RD, RA=1, RCode=2)
        response.set_header(TXID=cltxid, QDCount=0, ANCount=0, NSCount=0, ARCount=0)
        return response.to_bytes()
    cltxid = request.TXID
    rflags = request.FLAG
    RD = rflags['RD']
    if len(request.Question) == 0:
        print("Received empty query")
        response = DNSMessage()
        response.set_flags(QR=1, RD=RD, RA=1, RCode=1)
        response.set_header(TXID=cltxid)
        return response.to_bytes()
    qname  = request.Question[0]['QNAME']
    qtype  = request.Question[0]['QTYPE']
    qclass = request.Question[0]['QCLASS']
    if qtype in ['A', 'AAAA'] and any(qname == domain or qname.endswith('.'+domain) for domain in blacklist):
        if verbose: print("Blocked: " + qname)
        response = DNSMessage()
        response.set_flags(QR=1, RD=RD, RA=1)
        response.set_header(TXID=cltxid, QDCount=1, ANCount=1)
        response.copy_RRs(request, sections=['Question'])
        loopback = '127.0.0.1' if qtype == 'A' else '0000:0000:0000:0000:0000:0000:0000:0001'
        response.Answer = [{'ADDRESS': loopback, 'QNAME': qname, 'QTYPE': qtype, 'QCLASS': qclass, 'TTL': 3600}]
        return response.to_bytes()
    if debug: print("Client query parsed\n")

    # Build and send query upstream
    if debug: print("Generating upstream query")
    up_request = DNSMessage()
    up_request.set_flags(QR=0, RD=RD)
    up_request.gen_txid()
    up_request.set_header(QDCount=1)
    up_request.set_question(qname, qtype, qclass)
    packet = up_request.to_bytes()
    if packet is None:
        print('Error converting packet to bytes')
        response = DNSMessage()
        response.set_flags(QR=1, RD=RD, RA=1, RCode=2)
        response.set_header(TXID=cltxid)
        return response.to_bytes()
    up, conn = upstream.get_connection()
    if conn is None:
        print("Error connecting upstream.")
        response = DNSMessage()
        response.set_flags(QR=1, RD=RD, RA=1, RCode=2)
        response.set_header(TXID=cltxid)
        return response.to_bytes()
    up.sendall(conn, packet)
    if debug: print("Sent upstream query\n")

    # Receive and parse upstream response
    packet = up.recvall(conn)
    up.close(conn)
    if debug: print("Received upstream response")
    up_response = DNSMessage(packet)
    if up_response.ERROR:
        print('ERROR: '+up_response.ERROR)
        response = DNSMessage()
        response.set_flags(QR=1, RD=RD, RA=1, RCode=1)
        response.set_header(TXID=cltxid)
        return response.to_bytes()
    if debug: print("Upstream response parsed\n")

    # Build and send client response
    if debug: print("Generating client response")
    response = DNSMessage()
    response.set_flags(QR=1, RD=RD, RA=1)
    response.set_header(TXID=cltxid)
    response.copy_RRs(up_response)
    if debug: print("Sent client response\n\n")
    return response.to_bytes()


if __name__ == "__main__":
    main()
